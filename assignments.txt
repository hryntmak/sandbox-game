Sandbox hra

== Zadání

  Tato semestrální práce patří do kategorie her. Vaším cílem je vytvořit konkrétní hru, 
  která bude modifikovatelná prostřednictvím konfiguračních souborů. 
  Nesnažte se všechny hodnoty definovat přímo v kódu (a to ani pomocí konstant). 
  Umístěte je do konfiguračních souborů (jednoho nebo více), které váš program bude načítat.

  Vaším úkolem je naprogramovat jednoduchou 2D sandbox hru. Sandboxové hry se vyznačují především možností upravovat existující prostředí.

  Hra musí splňovat následující funkcionality:

-> 1) Implementujte hráče (př. postava, vesmírná loď, …), jeho stav (př. energie, životy, brnění, …) a umožněte interagovat s prostředím (př. těžit, kopat, stavět, …).

-> 2) Vytvořte (soubojový) model zranění, který bude mít alespoň 3 různé příčiny (př. pád z výšky, souboj s nepřítelem, pobyt v lávě, …).

-> 3) Vytvořte jednoduchý model prostředí, implementujte alespoň 3 různé mechaniky (př. gravitace, přelévání vody, růst stromů, …).

-> 4) Hra musí být konfigurovatelná ze souboru:

      a) mapa (nebo ještě lépe její generátor),

      b) definice jednotlivých nepřátel, názvy předmětů či jejich atributy.

-> 5) Hra musí umožnit uložit a následně načíst rozehranou hru.

  Kde lze využít polymorfismus? (doporučené)

    + postavy: hráč, zvířata, přítel (obchodník), nepřítel (různé druhy), …

    + efekty akcí: pád (ubere životy podle kvadrátu výšky), úder (ubere životy podle síly a obrany), kontakt s lávou (aplikuje oheň a ubere vždy 1 život), …

    + prostředí: vzduch (nic nedělá), voda (při použití s kbelíkem ho naplní nebo vyprázdní), hlína (hráč sebere a uloží do inventáře), 
    uhlí a další rudy (pokud hráč drží krumpáč, tak se vytěží), žebřík (přesune hráče na konec), …

    + uživatelské rozhraní: konzole, ncurses, SDL, OpenGL (různé varianty), …

== Specifikace

Budu implementovat sandbox hru inspirovanou hrami jako Minecraft, Terraria a Don ' t starve. 
Hráč je na mapě obklopen neproniknutelným podložím (16x8 bloků bez zdi) a může se pohybovat na 4 stranách. 
Na mapě je vždy blok postele, počítače a generátoru elektřiny pro tento počítač. 
Na mapě mohou být také další bloky, jako je půda, písek, uhlí, strom(může být stromek), houba, voda a láva. 
S některými z těchto bloků může hráč interagovat, přes některé může projít nebo dokonce pohnout. 
Hráč může těžit bloky a používat je jako palivo pro generátor(ne všechny bloky uvolňují energii při spalování).
Některé bloky lze těžit pouze s krumpáčem(také je blok) v ruce(aktivní block v inventáři) 
Elektřinu hráč potřebuje k tomu, aby si na počítači dělal progtest. 
Také pomocí počítače může hráč zkusit odevzdat(omezený počet pokusů) progtest a získat nějaké skóre závislé na připravenosti úkolu, je také šance získat červenou vlajku. 
Pokud hráč obdrží červenou vlajku, způsobí mu nějakou škodu. Také poškození se způsobí, pokud se hráči nepodaří odevzdat progtest a za každou akci bez energie.
Energii může hráč získat, pokud něco sní (houby) nebo spí. Energie se spotřebovává při pohybu a těžbě bloků. 
Vytěžené bloky jsou uloženy v omezeném inventáři, lze aktivní block  umístit před sebe. Po spánku hráč nejen obnovuje energii, 
ale také na mapě mohou růst houby a stromy, samozřejmě se blíží i deadline progtestu. Konec hry nastane, když hráč zemře, přijde deadline progtestu nebo hráč bude chtít zkončit sám.
Mapu, život hráče, jeho energii, inventář, úroveň programování, množství elektřiny, obtížnost progtestu, maximální počet pokusů atd. Lze konfigurovat pomocí konfiguračního souboru.

Ukazka vstupu/vystupu bez charakteristik na vystupě:

Zadejte pohyb:
$ W
+----------------+
|                |
|      ###       |
|           CGB  |
|  T             |
|       ^        |
|  t             |
|           ?    |
|         .      |
+----------------+
Zadejte pohyb:
$ W
+----------------+
|                |
|      ###       |
|           CGB  |
|  T    ^        |
|                |
|  t             |
|           ?    |
|         .      |
+----------------+
Zadejte pohyb:
$ D
+----------------+
|                |
|      ###       |
|           CGB  |
|  T    >        |
|                |
|  t             |
|           ?    |
|         .      |
+----------------+
Zadejte pohyb:
$ D
+----------------+
|                |
|      ###       |
|           CGB  |
|  T     >       |
|                |
|  t             |
|           ?    |
|         .      |
+----------------+

'^', 'v', '>', '<' - Hráč, záleží na směru pohybu
'#' - Půda
'C' - Počítač
'G' - Generátor elektřiny
'B' - Postel
'.' - Malá houba(nelze snist)
'?' - Velká houba(lze snist)
't' - Stromek(není palivo, lze projit)
'T' - Strom(je palivo, nelze projit)
atd.

== Polymorfismus

Polymorfismus je aplikovaný v rámci hierarchie tříd `CBlock` a `CAction`.

Třída `CBlock` má 5(bude více) potomků: `CAirBlock`, `CDirtBlock`, `CComputerBlock`, `CBedBlock` a `CBedrockBlock`.
Tato třída je potřebná k tomu, abychom mohli mit na mapě různé bloky, které se při interakci s nimi chovají odlišně.
Třída `CBlock` má polymorfní metody `update`, `refresh` a `action`. 
 Metoda `update` řekne bloku, že je nový den a ty bloky, které závisí na čase se mohou změnit nebo něco udělat(stromky a malé houby vyrostou).
 Metoda 'refresh' je volána pro sousední bloky s blokem, který byl dodán nebo zničen
 Přijímá dvourozměrné pole bloků a svou pozici, aby nějakým způsobem interagovala se sousedními bloky(například voda nahradí nepevné sousední bloky na kopii sebe - vyteče).
 Metoda `action` zkonstruuje a vrátí nějakou implementaci třídy CAction(pointer) v závislosti na implementaci samotné třídy CBlock. Akce CAction se koná již ve třídě Cgame.
 Například `CBedBlock` při interakci změní den a obnoví hráčovu energii (`CSkipDay` jako pointer na `CAction`).

Třída `CAction` má ý potomků: `CNoAction`, `CBurn`, `CEnergyAction`, `CMakeProgtest`, `CSkipDay`, `CSubmitProgtest`, `CTakeDamage`.
Tato třída je potřebná k tomu, aby žadný blok nevěděl o vlastnostech hráče nebo progtestu a nebral je ve svých metodách jako parametry.
Třída `CAction` má polymorfní metody `activate`, `changeStats` a `changeProgtest`.
 Metoda `activate` v závislosti na implementaci třídy provede nějaké změny s charakteristikami hráče a progtestu.
 Metoda `changeStats` v závislosti na implementaci třídy provede nějaké změny jenom s charakteristikami hráče.
 Metoda `changeProgtest` v závislosti na implementaci třídy provede nějaké změny s charakteristikami progtestu.
 Například `CTakeDamage` odebere množství HP u hráče, které bylo uvedeno při vytváření instance třídy.








